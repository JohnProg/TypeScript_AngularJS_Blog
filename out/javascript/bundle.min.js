var moduleFirstDemo;!function(t){"user strict";function o(t){t.when("/",{templateUrl:"app/views/postList.html",controller:"PostListController",controllerAs:"vm"}).when("/posts/new",{templateUrl:"app/views/newPost.html",controller:"PostListController",controllerAs:"vm"}).when("/posts/:id",{templateUrl:"app/views/viewPost.html",controller:"PostViewController",controllerAs:"vm"}).when("/admin/posts/:id",{templateUrl:"app/views/viewPost.html",controller:"PostViewController",controllerAs:"vm"}).when("/acerca",{templateUrl:"app/views/acerca.html"}).when("/admin/posts",{templateUrl:"app/views/admin/postList.html"}).otherwise("/")}var e=angular.module("demoModule",["ngRoute","common.services","ngSanitize"]);e.config(o),o.$inject=["$routeProvider"]}(moduleFirstDemo||(moduleFirstDemo={}));var moduleFirstDemo;!function(t){"use strict";var o=function(){function t(t,o,e,s){var n=this;this.$scope=t,this.DataPostService=o,this.DataPostFactory=e,this.$location=s,this.title="Product list",this.showImage=!1,this.posts=[],this.showProgress=!0,"/"==s.path()&&setTimeout(function(){n.DataPostFactory.getPosts().then(function(t){n.posts=t.reverse(),n.showProgress=!1})},0)}return t.prototype.savePost=function(){var t=this;this.currentPost.publishDate=new Date,this.currentPost.author="John",this.currentPost.likes=0,this.currentPost.tags=["js","html","ionic"],tinyMCE&&(this.currentPost.postDescription=tinyMCE.activeEditor.getContent()),this.DataPostFactory.savePost(this.currentPost).then(function(o){t.$location.path("/posts")})},t.prototype.deletePost=function(t){var o=this;console.log("WTF "+t);var e=this.posts[t].id;console.log("ID",this.posts),this.DataPostFactory.deletePost(e).then(function(e){o.posts.splice(t,1)})},t.prototype.loadEditor=function(){var t=this;setTimeout(function(){t.$scope.$apply(function(){return t.showProgress=!1})},4e3)},t.$inject=["$scope","DataPostService","DataPostFactory","$location"],t}();t.PostListController=o,angular.module("demoModule").controller("PostListController",o)}(moduleFirstDemo||(moduleFirstDemo={}));var moduleFirstDemo;!function(t){"use strict";var o=function(){function t(t,o,e){this.DataPostFactory=t,this.$location=o,this.$routeParams=e,this.postId=e.id,this.getPost()}return t.prototype.getPost=function(){var t=this;this.DataPostFactory.getPost(this.postId).then(function(o){t.post=o,t.getComments()})},t.prototype.addNewLike=function(){this.post.likes=this.post.likes+1||0,this.DataPostFactory.savePost(this.post).then(function(t){})},t.prototype.getComments=function(){var t=this;this.DataPostFactory.getComments(this.postId).then(function(o){t.post.comments=o.reverse()})},t.prototype.saveComment=function(){var t=this;this.comment.createdOn=new Date,this.comment.postId=this.postId,this.DataPostFactory.saveComment(this.comment).then(function(o){t.post.comments.push(o),t.comment=null})},t.prototype.load=function(){alert()},t.$inject=["DataPostFactory","$location","$routeParams"],t}();t.PostViewController=o,angular.module("demoModule").controller("PostViewController",o)}(moduleFirstDemo||(moduleFirstDemo={}));var moduleFirstDemo;!function(t){"use strict";var o=function(){function t(){this.restrict="A"}return t.instance=function(){return new t},t.prototype.link=function(t,o,e){console.log(e),setTimeout(function(){o[0].focus()})},t}();t.Focus=o,angular.module("demoModule").directive("focus",o.instance)}(moduleFirstDemo||(moduleFirstDemo={}));var moduleFirstDemo;!function(t){"use strict";var o=function(){function t(){this.scope={showProgress:"="},this.restrict="E",this.templateUrl="app/directives/progressBar.html"}return t.instance=function(){return new t},t.prototype.link=function(t,o,e){t.value=0,console.log(t.showProgress),setInterval(function(){t.$apply(function(){return t.value>=100?void(t.value=0):void(t.value=t.value+10)})},1e3)},t}();t.Progressbar=o,angular.module("demoModule").directive("progressBar",o.instance)}(moduleFirstDemo||(moduleFirstDemo={}));var moduleFirstDemo;!function(t){var o;!function(t){var o=function(){function t(t,o,e,s,n){this.postId=t,this.commentId=o,this.body=e,this.createdOn=s,this.author=n}return t}();t.Comment=o}(o=t.domain||(t.domain={}))}(moduleFirstDemo||(moduleFirstDemo={}));var moduleFirstDemo;!function(t){var o;!function(t){var o=function(){function t(t,o,e,s,n,r,i,u,a,c){this.postId=t,this.postName=o,this.postDescription=e,this.postShortDescription=s,this.publishDate=n,this.likes=r,this.author=i,this.imageUrl=u,this.comments=a,this.tags=c}return t}();t.Post=o}(o=t.domain||(t.domain={}))}(moduleFirstDemo||(moduleFirstDemo={}));var moduleFirstDemo;!function(t){"use strict";function o(t){return new e(t)}var e=function(){function t(t){this.$http=t}return t.prototype.getPosts=function(){return this.$http.get("http://104.131.28.224:3000/posts/").then(function(t){return t.data})},t.prototype.savePost=function(t){return this.$http.post("http://104.131.28.224:3000/posts/",t).then(function(t){return t.data})},t.prototype.updatePost=function(t){return this.$http.put("http://104.131.28.224:3000/posts/"+t.postId,t).then(function(t){return t.data})},t.prototype.getPost=function(t){return this.$http.get("http://104.131.28.224:3000/posts/"+t).then(function(t){return t.data})},t.prototype.getComments=function(t){return this.$http.get("http://104.131.28.224:3000/comments/?postId="+t).then(function(t){return t.data})},t.prototype.saveComment=function(t){return this.$http.post("http://104.131.28.224:3000/comments/",t).then(function(t){return t.data})},t.prototype.deletePost=function(t){return this.$http["delete"]("http://104.131.28.224:3000/posts/"+t).then(function(t){return t.data})},t.$inject=["$http"],t}();t.DataPostFactory=e,o.$inject=["$http"],angular.module("demoModule").factory("DataPostFactory",o)}(moduleFirstDemo||(moduleFirstDemo={}));var moduleFirstDemo;!function(t){"use strict";function o(){return function(t,o){var e=[];return o?(angular.forEach(t,function(t){-1!=angular.lowercase(t.postName).indexOf(angular.lowercase(o))&&e.push(t)}),e):t}}t.StoreSearch=o,angular.module("demoModule").filter("storeSearch",o)}(moduleFirstDemo||(moduleFirstDemo={}));var moduleFirstDemo;!function(t){var o;!function(t){angular.module("common.services",["ngResource"])}(o=t.common||(t.common={}))}(moduleFirstDemo||(moduleFirstDemo={}));var moduleFirstDemo;!function(t){var o;!function(t){"use strict";var o=function(){function t(t){this.$resource=t}return t.prototype.getPostResource=function(){return this.$resource("http://104.131.28.224:3000/posts/:id")},t.$inject=["$resource"],t}();t.DataPostService=o,angular.module("common.services").service("DataPostService",o)}(o=t.common||(t.common={}))}(moduleFirstDemo||(moduleFirstDemo={}));
//# sourceMappingURL=data:application/json;base64,